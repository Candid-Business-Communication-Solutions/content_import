<?php

/**
 * @file
 * A module that crawls sites for links and creates nodes out of them.
 */

/**
 * Implements hook_help.
 *
 * Displays help and module information.
 *
 * @param path 
 *   Which path of the site we're using to display help
 * @param arg 
 *   Array that holds the current path as returned from arg() function
 */
function link_import_help($path, $arg) {
  switch ($path) {
    case "admin/help#link_import":
      return '<p>' . t("Imports links and creates nodes form them.") . '</p>';
      break;
  }
} 

/**
 * Implements hook_block_info().
 */

function link_import_block_info() {
  $blocks['link_import'] = array(
    'info' => t('Import Links'), //The name that will appear in the block list.
    'cache' => DRUPAL_CACHE_PER_ROLE, //Default
  );
  return $blocks;
}



/**
 * Implements hook_menu().
 */
function link_import_menu() {
  $items = array();

  $items['admin/config/content/link_import'] = array(
    'title' => 'Import Links Configuration',
    'description' => 'Configuration for Link Import module',
    'page callback' => 'drupal_get_form',
    'access callback' => TRUE,
    'page arguments' => array('link_import_config_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['link_import'] = array(
    'title' => 'Import Links',
    'description' => 'Set Parameters for Link Importation',
    'page callback' => 'drupal_get_form',
    'access callback' => TRUE,
    'page arguments' => array('link_import_form'),
    //'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  

  return $items;
}

/**
 * Page callback: Link Import settings
 *
 * @see link_import_menu()
 */

function link_import_form() {
  $form['urls'] = array(
    "#type" => 'fieldset',
    "#title" => t('URLs'),
    '#weight' => 40, 
    '#collapsible' => TRUE, 
    '#collapsed' => FALSE,
  );

	$form['urls']['url_list'] = array(
		'#type' => 'textarea', 
		'#title' => t('URL(s) to page crawl for links'), 
    '#description' => t('Enter one URL per line must include protocol moniker (ex.: http://, ftp://, smb://, etc.)'),
		'#required' => TRUE,
    '#default_value' => t("http://localhost")
	);

	$content_types = node_type_get_names();

	$form['urls']['content_type'] = array(
	   '#type' => 'select',
	   '#title' => t('Select Content Type'),
	   '#options' => $content_types,
     '#default_value' => "Song"
	);

  $form['attachments'] = array(
    "#type" => 'fieldset',
    "#title" => t('Attachments'),
    '#weight' => 50, 
    '#collapsible' => TRUE, 
    '#collapsed' => TRUE,
  );

  $form['attachments']['get_file'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Get Attachments'),
    '#options' => drupal_map_assoc(
      array(
        t('none'),
        t('all'),
      )
    ),
    '#default_value' => array("all")
  );

  //TODO
  $form['attachments']['custom_files'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter file extension types to be downloaded separated by commas'),
    '#description' => t('example: jpg, pdf, tiff')
  );

  $form['attachments']['html_body'] = array(
    '#type' => 'checkbox',
    '#title' => 'Add content of HTML files to node body.',
    '#description' => t('Instead of downloading the file its contents will be added to node body.')
  );

  $form['options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Options'),
    '#weight' => 60,
    '#collapsible' => TRUE, 
    '#collapsed' => TRUE
  );

  //TODO
  $form['options']['div'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Look for div(s) and put into separate node(s)'),
    '#options' => array('header', 'footer', 'nav')
  );

	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Submit'),
    '#weight' => 100
	);

	return $form;
}

function link_import_config_form()
{
  $form['undo'] = array(
    '#type' => 'checkbox',
    '#title' => t('Keep log of import batches to be able to undo them.')
  );

  return $form;
}

/**
* Validate the form.
*/
function link_import_form_validate($form, &$form_state) {
  /*
  if(foo)
  {
    form_set_error($bar, t('message'));
  }
  */
}

function link_import_form_submit($form, &$form_state) {
  $url_list = $form_state['values']['url_list'];
  $urls = get_urls($url_list);
  $content_type = $form_state['values']['content_type'];
  $regexp = "<a\s[^>]*href=(\"??)([^\" >]*?)\\1[^>]*>(.*)<\/a>";
  $bodytext = "";

  foreach($urls as $url) {
    $input = @file_get_contents($url) or die("Could not access file: $url");
    

    if(preg_match_all("/$regexp/siU", $input, $matches, PREG_SET_ORDER)) {
      foreach($matches as $match) {
        //Path: $match[2]
        //Text: $match[3]
        
        $node = new stdClass(); // Create a new node object
        $node->type = $content_type; // Or page, or whatever content type you like
        node_object_prepare($node); // Set some default values
        $node->title    = strip_tags($match[3]);
        $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
        $node->status   = 1;      //(1 or 0): published or not
        $node->promote  = 0;      //(1 or 0): promoted to front page
        $node->sticky   = 0;      //(1 or 0): sticky at top of lists
        $node->comment  = 1;      //2 = comments on, 1 = comments off

        //TODO: get id of currently logged in user
        $node->uid = 1; // UID of the author of the node; or use $node->name

        //Add content of HTML files to node body if checked
        if($form_state['values']['html_body'] == 1) {
          $node->body[$node->language][0]['value']   = $input;
        } else {
          $node->body[$node->language][0]['value']   = "";
        }

        

        $node->body[$node->language][0]['summary'] = text_summary($bodytext);
        $node->body[$node->language][0]['format']  = 'filtered_html';

        /**
         * Download, save, and attach file to node
         */
        $source_path = $match[2]; //href from crawled page

        //TODO: only process files of specific mime-types - the Drupal way, not this abortion here.
        $valid_mime = array('txt', 'image/jpeg', 'png', 'pdf', 'doc', 'docx', 'xls', 'xlsx');

        foreach ($valid_mime as $mime) 
        {
          if(file_get_mimetype($match[2]) == $mime){
            $image = file_get_contents($source_path);
            $file = file_save_data($image, 'public://' . drupal_basename($source_path),FILE_EXISTS_REPLACE);
            $file->display = 1;
            //TODO: get ALT text for file
            $file->description = "";
            $node->field_attachment = array(
              LANGUAGE_NONE => array(
                '0' => (array)$file
              )
            );
          } 
        }

        // I prefer using pathauto, which would override the below path
        $path = 'node_created_on' . date('YmdHis');
        $node->path = array('alias' => $path);

        if($node = node_submit($node)) { // Prepare node for saving
          node_save($node);
          echo "Node with nid " . $node->nid . " saved!\n";
        }
      }
    } 
  }
}

/**
 * Parse a list of URLs submitted via a textarea and put them into an array
 */
function get_urls($url_list){
  //put list of links in textarea into an array
  $urls = preg_split("/[\r\n,]+/", $url_list);
  return $urls;
}