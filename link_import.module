<?php

/**
 * @file
 * A module that crawls sites for links and creates nodes out of them.
 */

/**
 * Implements hook_help.
 *
 * Displays help and module information.
 *
 * @param path 
 *   Which path of the site we're using to display help
 * @param arg 
 *   Array that holds the current path as returned from arg() function
 */
function link_import_help($path, $arg) {
  switch ($path) {
    case "admin/help#link_import":
      return '<p>' . t("Imports links and creates nodes form them.") . '</p>';
      break;
  }
} 

/**
 * Implements hook_block_info().
 */

function link_import_block_info() {
  $blocks['link_import'] = array(
    'info' => t('Import Links'), //The name that will appear in the block list.
    'cache' => DRUPAL_CACHE_PER_ROLE, //Default
  );
  return $blocks;
}



/**
 * Implements hook_menu().
 */
function link_import_menu() {
  $items = array();

  $items['admin/config/content/link_import'] = array(
    'title' => 'Import Links Configuration',
    'description' => 'Configuration for Link Import module',
    'page callback' => 'drupal_get_form',
    'access callback' => TRUE,
    'page arguments' => array('link_import_config_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['link_import'] = array(
    'title' => 'Import Links',
    'description' => 'Set Parameters for Link Importation',
    'page callback' => 'drupal_get_form',
    'access callback' => TRUE,
    'page arguments' => array('link_import_form'),
    //'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  

  return $items;
}

/**
 * Page callback: Link Import settings
 *
 * @see link_import_menu()
 */

function link_import_form() {
  $form['urls'] = array(
    "#type" => 'fieldset',
    "#title" => t('URLs'),
    '#weight' => 4, 
    '#collapsible' => TRUE, 
    '#collapsed' => FALSE,
  );

	$form['urls']['url_list'] = array(
		'#type' => 'textarea', 
		'#title' => t('URL(s) to page crawl for links'), 
    '#description' => t('Enter one URL per line.'),
		'#required' => TRUE,
	);

	$content_types = node_type_get_names();

	$form['urls']['content_type'] = array(
	   '#type' => 'select',
	   '#title' => t('Select Content Type'),
	   '#options' => $content_types
	);

  $form['attachments'] = array(
    "#type" => 'fieldset',
    "#title" => t('Attachments'),
    '#weight' => 5, 
    '#collapsible' => TRUE, 
    '#collapsed' => FALSE,
  );

  $form['attachments']['get_file'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Get Attachments'),
    '#options' => drupal_map_assoc(
      array(
        t('none'),
        t('all'),
      )
    )
  );

  $form['attachments']['custom_files'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter file extension types to be downloaded separated by commas'),
    '#description' => t('example: jpg, pdf, tiff')
  );

	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Submit'),
    '#weight' => 10
	);

	return $form;
}
 function link_import_config_form() {
  $form['undo'] = array(
    '#type' => 'checkbox',
    '#title' => t('Keep log of import batches to be able to undo them.')
  );

  return $form;
 }
/**
* Validate the form.
*/
function link_import_form_validate($form, &$form_state) {
  $url = $form_state['values']['url_list'];
  if(filter_var($url, FILTER_VALIDATE_URL) == FALSE)
  {
    form_set_error('url', t("Invalid URL " . $form_state['values']['url_list']));
  }
}

function link_import_form_submit($form, &$form_state) {
  $url = $form_state['values']['url_list'];
  $input = @file_get_contents($url) or die("Could not access file: $url");
  $regexp = "<a\s[^>]*href=(\"??)([^\" >]*?)\\1[^>]*>(.*)<\/a>";
  $content_type = $form_state['values']['content_type'];

  if(preg_match_all("/$regexp/siU", $input, $matches, PREG_SET_ORDER)) {
    foreach($matches as $match) {
      //echo "Path: $match[2] <br/>";
      //echo "Text: $match[3] <br/>";
      
      $node = new stdClass(); // Create a new node object
      $node->type = $content_type; // Or page, or whatever content type you like
      node_object_prepare($node); // Set some default values
      $node->title    = strip_tags($match[3]);
      $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
      $node->status   = 1;      //(1 or 0): published or not
      $node->promote  = 0;        //(1 or 0): promoted to front page
      $node->sticky   = 0;        //(1 or 0): sticky at top of lists
      $node->comment  = 1;        //2 = comments on, 1 = comments off

      $node->uid = 1; // UID of the author of the node; or use $node->name
      $bodytext = "Bueller?";
      $node->body[$node->language][0]['value']   = $bodytext;
      $node->body[$node->language][0]['summary'] = text_summary($bodytext);
      $node->body[$node->language][0]['format']  = 'filtered_html';

      // I prefer using pathauto, which would override the below path
      $path = 'node_created_on' . date('YmdHis');
      $node->path = array('alias' => $path);

      if($node = node_submit($node)) { // Prepare node for saving
        node_save($node);
        echo "Node with nid " . $node->nid . " saved!\n";
      }   
    }
  } 
}