<?php

/**
 * @file
 * A module that crawls sites for links and creates nodes out of them.
 */

/**
 * Implements hook_library_info()
 */
function link_import_libraries_info() {
	// A very simple library. No changing APIs (hence, no versions), no variants.
    // Expected to be extracted into 'sites/all/libraries/simple_html_dom'.
    $libraries['simple_html_dom'] = array(
      'name' => 'Simple HTML Dom',
      'vendor url' => 'http://simplehtmldom.sourceforge.net/',
      'download url' => 'http://sourceforge.net/projects/simplehtmldom/files/simple_html_dom.php',
      'files' => array(
        'php' => array('simple_html_dom.php'),
      ),
      'version' => '1.5',
   );

    return $libraries;
}

/**
 * Load libraries
 */

// Try to load the library and check if that worked.
if (($library = libraries_load('simple_html_dom')) && !empty($library['loaded'])) {
 	// Do something with the library here.
 	// This doesn't seem to do anything
	// $html = new simple_html_dom();
} else {
	// Something went wrong. :(
	// This contains a short status code of what went wrong, such as 'not found'.
	$error = $library['error'];
	// This contains a detailed (localized) error message.
	$error_message = $library['error message'];
	print_r($error_message);
}
/**
 * Implements hook_help.
 *
 * Displays help and module information.
 *
 * @param path 
 *   Which path of the site we're using to display help
 * @param arg 
 *   Array that holds the current path as returned from arg() function
 */
function link_import_help($path, $arg) {
  switch ($path) {
    case "admin/help#link_import":
      return '<p>' . t("Imports links and creates nodes form them.") . '</p>';
      break;
  }
} 

/**
 * Implements hook_block_info().
 */

function link_import_block_info() {
  $blocks['link_import'] = array(
    'info' => t('Import Links'), //The name that will appear in the block list.
    'cache' => DRUPAL_CACHE_PER_ROLE, //Default
  );
  return $blocks;
}

/**
 * Implements hook_menu().
 */
function link_import_menu() {
  $items = array();

  $items['admin/config/content/link_import'] = array(
    'title' => 'Import Links',
    'description' => 'Configuration for Link Import module',
    'page callback' => 'drupal_get_form',
    'access callback' => TRUE,
    'page arguments' => array('link_import_config_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['link_import'] = array(
    'title' => 'Import Links',
    'description' => 'Set Parameters for Link Importation',
    'page callback' => 'drupal_get_form',
    'access callback' => TRUE,
    'page arguments' => array('link_import_form'),
    //'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );  

  return $items;
}

/**
 * Page callback: Link Import settings
 *
 * @see link_import_menu()
 */

function link_import_form($form, &$form_state) {

  $content_types = node_type_get_names();

  $form['urls'] = array(
    "#type" => 'fieldset',
    "#title" => t('URLs'),
    '#weight' => 4, 
    '#collapsible' => TRUE, 
    '#collapsed' => FALSE,
  );

  $form['urls']['batch_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter batch name'),
    '#description' => t('Human readable name for batch job.')
    //TODO: check configuration page checkbox to see if batch name is required
  );



	$form['urls']['url_list'] = array(
		'#type' => 'textarea', 
		'#title' => t('URL(s) to page crawl for links'), 
    '#description' => t('Enter one URL per line must include protocol moniker (ex.: http://, ftp://, smb://, etc.)'),
		'#required' => TRUE,
    '#default_value' => t("http://localhost/index.html")
	);


	$form['urls']['content_type'] = array(
	   '#type' => 'select',
	   '#title' => t('Select Content Type'),
	   '#options' => $content_types,
     '#default_value' => "song"
	);

  $form['urls']['taxonomy_list'] = array(
    '#type' => 'select',
    '#title' => 'Select Taxonomy',
    '#options' => get_taxonomy_vocabularies(),
    '#ajax' => array(
      'callback' => 'ajax_terms_callback',
      'wrapper' => 'term-list-div',
      'method' => 'replace'
    )
  );

  $form['urls']['term_list'] = array(
    '#type' => 'select',
    '#description' => 'Term list',
    '#prefix' => '<div id="term-list-div">',
    '#suffix' => '</div>',
    '#options' => drupal_map_assoc(array(t('Select')))
  );

  $form['urls']['get_html'] = array(
    '#type' => 'checkbox',
    '#title' => 'Pull HTML body into body of node'
  );

  $form['attachments'] = array(
    "#type" => 'fieldset',
    "#title" => t('Attachments'),
    '#weight' => 5, 
    '#collapsible' => TRUE, 
    '#collapsed' => FALSE,
  );

  $form['attachments']['get_file'] = array(
    '#type' => 'radios',
    '#title' => t('Get Attachments'),
    '#options' => drupal_map_assoc(
      array(
        t('none'),
        t('all'),
        t('some (buggy)')
      )
    ),
    '#default_value' => t('none')
  );

  $form['attachments']['custom_files'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter file extension types to be downloaded separated by commas'),
    '#description' => t('example: jpg, pdf, tiff'),
    '#states' => array(
      'invisible' => array(
         ':input[name="get_file"]' => array('value' => 'none'),
      ),
      'invisible' => array(
         ':input[name="get_file"]' => array('value' => 'all'),
      ),
        'visible' => array(
          ':input[name="get_file"]' => array('value' => 'some'),
      ),
    ),
  );

  $form['undo'] = array(
    '#type' => 'fieldset',
    '#title' => 'Undo',
    '#collapsible' => TRUE, 
    '#collapsed' => FALSE
  );
/*
  $form['undo']['batch_name'] = array(
    '#type' => 'select',
    '#title' => t('Select batch(es) to delete'),
    '#options' => drupal_map_assoc(get_batch_names()),
    '#description' => t('Permanently delete nodes in batch(es). This cannot be undone.')
  );

  $form['undo']['submit_undo'] = array(
    '#type' => 'submit',
    '#value' => t('Submit')
    //TODO: process multiple submit buttons on same page
  );
*/
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Submit'),
    '#weight' => 10
	);

	return $form;
}

function ajax_terms_callback($form, &$form_state) 
{
  $vid = $form_state['values']['taxonomy_list']['name'];
  $form['urls']['term_list'] = array(
    '#type' => 'select',
    '#title' => 'Terms',
    '#options' => drupal_map_assoc(array('foo', 'bar'))
  );

  return $form['urls']['term_list'];
}

 function link_import_config_form() {
  $form['link_import_undo'] = array(
    '#type' => 'checkbox',
    '#title' => t('Keep log of import batches to be able to undo them.')
  );

  $form['batch_name_required'] = array(
    '#type' => 'checkbox',
    '#title' => t('Require batch name?'),
    '#description' => t('Overrides setting on main page')
  );

  return $form;
 }

/**
* Validate the form.
*/
function link_import_form_validate($form, &$form_state) 
{
  /*
  $url = $form_state['values']['url_list'];
  if(filter_var($url, FILTER_VALIDATE_URL) == FALSE)
  {
    form_set_error('url', t("Invalid URL " . $form_state['values']['url_list']));
  }
  */
}

function link_import_form_submit($form, &$form_state) 
{
  $url_list       = $form_state['values']['url_list'];
  $urls           = get_urls($url_list);
  $content_type   = $form_state['values']['content_type'];
  $regexp         = "<a\s[^>]*href=(\"??)([^\" >]*?)\\1[^>]*>(.*)<\/a>";
  $bodytext       = "";
  $batch_num      = time();
  $batch_name     = $form_state['values']['batch_name'];

  foreach($urls as $url) {
    $input = @file_get_contents($url) or die("Could not access file: $url");
    

    if(preg_match_all("/$regexp/siU", $input, $matches, PREG_SET_ORDER)) {
      foreach($matches as $match) {
        $path = $match[2];
        $text = $match[3];
        
        $node = new stdClass(); // Create a new node object
        $node->type = $content_type; // Or page, or whatever content type you like
        node_object_prepare($node); // Set some default values
        $node->title    = strip_tags($text);
        $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
        $node->status   = 1;      //(1 or 0): published or not
        $node->promote  = 0;        //(1 or 0): promoted to front page
        $node->sticky   = 0;        //(1 or 0): sticky at top of lists
        $node->comment  = 1;        //2 = comments on, 1 = comments off
        //TODO: get id of currently logged in user
        $node->uid = 1; // UID of the author of the node; or use $node->name

        if($form_state['values']['get_body'] = TRUE) { $bodytext = get_html($url, "body"); }
        $node->body[$node->language][0]['value']   = $bodytext;
        $node->body[$node->language][0]['summary'] = text_summary($bodytext);
        $node->body[$node->language][0]['format']  = 'filtered_html';

        attach_file($path, $node, 
          $form_state['values']['get_file'],
          array($form_state['values']['custom_files'])
        );

        // I prefer using pathauto, which would override the below path
        $path = 'node_created_on' . date('YmdHis');
        $node->path = array('alias' => $path);

        if($node = node_submit($node)) { // Prepare node for saving
          node_save($node);  
          add_batch_log($node->nid, $batch_num, $batch_name);                  
        }
      }
    } 
  }
}

/**
 * Parse a list of URLs submitted via a textarea and put them into an array
 */
function get_urls($url_list)
{
  //put list of links in textarea into an array
  //TODO: check for empty array and return message
  $urls = preg_split("/[\r\n,]+/", $url_list);
  return $urls;
}

function attach_file($path, $node, $file, $mime_list)
{
  //TODO: only process files of specific mime-types--switch?
  switch($file)
  {
    case "all":
      $attachment = file_get_contents($path);
      $file = file_save_data($attachment, 'public://' . drupal_basename($path),FILE_EXISTS_REPLACE);
      $file->display = 1;
      $file->description = "";
      $node->field_attachment = array(
        LANGUAGE_NONE => array(
          '0' => (array)$file
        )
      );
    break;
    case "some":
      //$mime_list = array('txt', 'rtf', 'jpeg', 'jpg', 'png', 'pdf', 'doc', 'docx', 'xls', 'xlsx');
      foreach ($mime_list as $mime) 
      {
        if(check_mime_type($mime, $mime_list))
        {
          $attachment = file_get_contents($path);
          $file = file_save_data($attachment, 'public://' . drupal_basename($path),FILE_EXISTS_REPLACE);
          $file->display = 1;
          $file->description = "";
          $node->field_attachment = array(
            LANGUAGE_NONE => array(
              '0' => (array)$file
            )
          );
        }
      }
    break;
    default:
  }
}

function get_taxonomy_vocabularies () {
  $taxonomies = taxonomy_get_vocabularies();
  $vocabularies = array();
  foreach($taxonomies as $t)
  {
    //$vocabularies['name'] = $t->name;
    $vocabularies[] = $t->vid;
  }

  return $vocabularies;
}

function get_vocabulary_list ($vid)
{
  //get all of the taxonomy vocabularies
  $vocabularies = taxonomy_get_vocabularies();

  //get a  vocabulary specified by vocabulary id argument
  $v = $vocabularies[$vid]->vid;

  //get the  taxonomy tree of the specified vocabulary
  $trees = taxonomy_get_tree($v);

  /*
  //store list of vocabulary items
  $key = array();
  $value = array();
  

  //iterate through taxonomy tree and add item name to list
  foreach ($trees as $tree)
  {
    $key[]  = "$tree->vid";
    $value[] = "$tree->name";
  }

  //return array_combine($key, $value);
  return array('foo', 'bar');
  */
}

function add_batch_log($nid, $batch_num, $batch_name = "") 
{
  if($batch_name == "")
  {
    $batch_name = $batch_num;
  }

  $table = "link_import_log";
  $record = array(
    'nid' => $nid,
    'batch_num' => $batch_num,
    'batch_name' => $batch_name
  );

  drupal_write_record($table, $record);

  return;
}

function get_batch_names()
{
  $result = db_query('SELECT batch_name FROM {link_import_log}', array());

  $names = $result->fetchAllAssoc('batch_name');

  $batch = array();

  foreach ($names as $name)
  {
    $batch[] =  $name->batch_name;
  }

  return $batch;
}

function get_batch_numbers()
{
  $result = db_query('SELECT batch_num FROM {link_import_log}', array());

  $nums = $result->fetchAllAssoc('batch_num');

  $batch = array();

  foreach ($nums as $num)
  {
    $batch[] =  $num->batch_num;
  }

  return $batch;
}

function get_batch_nids($batch_number)
{
  $result = db_query('SELECT nid FROM {link_import_log}', array(':batch_num' => $batch_number));

  $nids = $result->fetchAllAssoc('nid');

  $batch = array();

  foreach ($nids as $nid)
  {
    $batch[] =  $nid->nid;
  }

  return $batch;
}

function get_batch_lids($batch_number)
{
  $result = db_query('SELECT lid FROM {link_import_log}', array(':batch_num' => $batch_number));

  $lids = $result->fetchAllAssoc('lid');

  $batch = array();

  foreach ($lids as $lid)
  {
    $batch[] =  $lid->lid;
  }

  return $batch;
}

function delete_batch_nodes($batch_number)
{
  $batch = get_batch_nids($batch_number);

  foreach($batch as $b)
  {
    node_delete($b);
  }

  //clear batch from log
  delete_batch($batch_number);

}

function delete_batch($batch_number)
{
  $batch = get_batch_lids($batch_number);

  foreach($batch as $b)
  {
    $num_deleted = db_delete('link_import_log')
      ->condition('batch_num', $batch_number)
      ->execute();
  }
}

function get_mime_type($url) {
    $buffer = file_get_contents($url);
    $finfo = new finfo(FILEINFO_MIME_TYPE);
    $type = preg_replace('%^[a-z]+\/%', '', $finfo->buffer($buffer));
    return $type;
}


function check_mime_type($urls, $types)
{
  //$types = array('pdf', 'doc', 'docx', 'png', 'jpg');
  foreach($types as $t)
  {
    if(get_mime_type($urls) == $t)
    {
      return true;
    } else {
      return false;
    }
  }
}

function get_html($file, $element)
{
 	//get specified element from crawled page
 	libraries_load('simple_html_dom');
 	$html = new simple_html_dom();
	$html->load_file($file);
	//get first element in array of found elements
	$e = $html->find($element, 0);
	return $e;
}

function link_import_schema()
{
  $schema['link_import_log'] = array(
    'description' => 'Store import batch IDs for undo',
    'fields' => array(
      'lid' => array(
        'description' => 'link import id',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'batch_num' => array(
        'description' => 'batch number',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'nid' => array(
        'description' => 'node id',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'batch_name' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'varchar',
        'length' => '50',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('lid'),
  );

  return $schema;
}